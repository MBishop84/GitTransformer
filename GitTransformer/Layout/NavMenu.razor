@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<RadzenPanelMenu Multiple="true">
    <RadzenPanelMenuItem Text="Home" Path="@($"{NavigationManager.BaseUri}")" Icon="psychology"></RadzenPanelMenuItem>
    <RadzenPanelMenuItem Text="Transformer" Path="@($"{NavigationManager.BaseUri}transformer")" Icon="function"></RadzenPanelMenuItem>
    <RadzenPanelMenuItem Text="Game Calculator" Path="@($"{NavigationManager.BaseUri}round_sum")" Icon="functions"></RadzenPanelMenuItem>
</RadzenPanelMenu>
<hr />
<RadzenStack Orientation="Orientation.Vertical"
             AlignItems="AlignItems.Center"
             JustifyContent="JustifyContent.SpaceBetween"
             Style="height: 70vh">
    <div>
        <RadzenLabel Component="ThemeSelect" Text="Change Theme" />
        <RadzenDropDown TValue="string" Value="@_theme" Data="@_themes"
                        Change="@(async args => await ChangeTheme($"{args}"))" Name="ThemeSelect" />
    </div>
    <RadzenButton Variant="Variant.Outlined"
                  Shade="Shade.Darker"
                  Icon="person"
                  Click="@(_ => NavigationManager.NavigateTo($"{NavigationManager.BaseUri}about"))"
                  Text="About"
                  ButtonStyle="ButtonStyle.Info"
                  Style="width: 100%"/>
</RadzenStack>

@code {
    readonly string[] _themes =
    [
        "default",
        "dark",
        "software",
        "humanistic-dark",
        "standard"
    ];
    string _theme = "Select Theme";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        _theme = await JsRuntime.InvokeAsync<string>("localStorage.getItem", "RadzenTheme");
        await InvokeAsync(StateHasChanged);
    }

    private async Task ChangeTheme(string theme)
    {
        await JsRuntime.InvokeVoidAsync("localStorage.setItem", "RadzenTheme", theme);
        NavigationManager.NavigateTo(NavigationManager.BaseUri);
        NavigationManager.Refresh(true);
    }
}