@page "/"
@page "/GitTransformer/"
@inject Services.LocalFileService FileService
@inject Services.QuotableApiService QuotableService
@inject AppData AppData
@inject IJSRuntime JS
@using System.Text.Json
@rendermode InteractiveWebAssembly

<PageTitle>Home</PageTitle>

<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="10px">
    <RadzenImage Path="images/stoic.png" Style="height: 50vh" AlternateText="stoic" />
    <br />
    @if (_loading)
    {
        <RadzenText TextStyle="TextStyle.Subtitle1">Seeking Wisdom...</RadzenText>
        <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Secondary" Style="width: 50%; height: 3px"
        Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    }
    else
    {
        <RadzenText TextStyle="TextStyle.Subtitle1" Style="max-width: 600px">@_quote.Text</RadzenText>
        <RadzenText TextStyle="TextStyle.Subtitle2">@_quote.Author.Name</RadzenText>
    }
    <RadzenButton Variant="Variant.Outlined" Shade="Shade.Darker" Click="@GetQuote" Text="Refresh Quote" ButtonStyle="ButtonStyle.Secondary" />
</RadzenStack>

@code {
    Quote _quote = new(0, "Seeking Wisdom...", new Author(0, "Unknown"));
    bool _loading = true;

    protected override void OnInitialized()
    {
        AppData.OnChange += StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        if (!AppData.IsLoaded)
            await AppData.LoadAsync(JS);
        await GetQuote();
    }

    async Task GetQuote()
    {
        _loading = true;
        await InvokeAsync(StateHasChanged);
        try
        {
            _quote = await QuotableService.GetRandomQuote();
            if (_quote.Author.Name == "Unknown")
                _quote = await FileService.GetRandomQuote() ?? new();
        }
        catch (Exception ex)
        {
            _quote = new Quote(0, "An error occurred while seeking wisdom.", new Author(0, ex.Message));
        }
        finally
        {
            _loading = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}
