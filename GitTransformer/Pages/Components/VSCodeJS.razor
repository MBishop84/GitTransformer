
<RadzenStack Orientation="Orientation.Vertical"
             AlignItems="AlignItems.Stretch"
             JustifyContent="JustifyContent.Stretch"
             Style="width: 100%; height: 100%"
             Gap="5px">
    <RadzenStack Orientation="Orientation.Horizontal"
                 AlignItems="AlignItems.Stretch"
                 JustifyContent="JustifyContent.SpaceBetween"
                 Wrap="FlexWrap.Wrap"
                 Style="width: 100%"
                 Gap="5px">
        <RadzenButton Variant="Variant.Outlined"
                      Shade="Shade.Darker"
                      Click="@PreviousJs"
                      Icon="keyboard_double_arrow_left"
                      Style="flex-grow:1"
                      ButtonStyle="ButtonStyle.Info" />
        <RadzenDropDown Data="@_jsTransforms"
                        Placeholder="Saved Transforms"
                        TValue="JsTransform"
                        TextProperty="Name"
                        ValueProperty="Code"
                        Style="flex-grow:3"
                        Change="@(async x => await UpdateUserCode($"{x}"))" />
        <RadzenButton Variant="Variant.Outlined"
                      Shade="Shade.Darker"
                      Click="@NextJs"
                      Icon="keyboard_double_arrow_right"
                      Style="flex-grow:1"
                      ButtonStyle="ButtonStyle.Info" />
        <RadzenSplitButton Variant="Variant.Outlined"
                           Click="@(x => JavaScript(x))"
                           Text="Execute"
                           Icon="play_circle"
                           Style="flex-grow:3"
                           ButtonStyle="ButtonStyle.Success">
            <ChildContent>
                <RadzenSplitButtonItem Text="Save" Value="1" Icon="save" IconColor="@Colors.Primary" />
                <RadzenSplitButtonItem Text="Delete" Value="2" Icon="delete" IconColor="@Colors.Danger" />
            </ChildContent>
        </RadzenSplitButton>
        <RadzenDropDown Data="@_monacoThemes"
                        TValue="string"
                        Value="@AppData.MonacoTheme"
                        Style="flex-grow:3"
                        Change="@(async x => await ChangeTheme($"{x}"))" />
        @if (InModal)
        {
            <RadzenButton Variant="Variant.Outlined"
                          Shade="Shade.Darker"
                          Click="@(async _ => DialogService.Close(await Editor.GetValue()))"
                          Icon="close"
                          Text="Close Modal"
                          Style="flex-grow:3"
                          ButtonStyle="ButtonStyle.Danger" />
        }
    </RadzenStack>
    <StandaloneCodeEditor Id="user_code"
                          ConstructionOptions="EditorConstructionOptions"
                          @ref="Editor" />
</RadzenStack>