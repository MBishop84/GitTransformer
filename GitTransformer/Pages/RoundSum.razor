@page "/round_sum"
@page "/GitTransformer/round_sum"
@rendermode InteractiveWebAssembly

<RadzenPanel AllowCollapse="true" class="rz-my-2 rz-mx-auto" Style="width: 70%;">
    <HeaderTemplate>
        <RadzenText TextStyle="TextStyle.Subtitle1" class="rz-display-flex rz-align-items-center rz-m-0">
            <RadzenIcon Icon="settings" class="rz-me-1" /><b>Settings</b>
        </RadzenText>
    </HeaderTemplate>
    <ChildContent>
        <RadzenCard>
            <RadzenStack Orientation="Orientation.Horizontal"
                         AlignItems="AlignItems.Center"
                         JustifyContent="JustifyContent.Center"
                         Wrap="FlexWrap.Wrap" Gap="4px">
                <RadzenFormField Text="Players" Variant="Variant.Outlined">
                    <RadzenNumeric @bind-Value="@_cols"
                                   TValue="int"
                                   TextAlign="TextAlign.Center"
                                   Change="@(_ => ChangeSetup())" />
                </RadzenFormField>
                <RadzenFormField Text="Rounds" Variant="Variant.Outlined">
                    <RadzenNumeric @bind-Value="@_rows"
                                   TValue="int"
                                   TextAlign="TextAlign.Center"
                                   Change="@(_ => ChangeSetup())" />
                </RadzenFormField>
                <RadzenButton Variant="Variant.Outlined"
                              Shade="Shade.Darker"
                              Click="@(_ => ClearScores())"
                              Text="Clear Scores"
                              ButtonStyle="ButtonStyle.Primary"
                              class="rz-mt-3" />
            </RadzenStack>
        </RadzenCard>
    </ChildContent>
</RadzenPanel>
<RadzenStack Orientation="Orientation.Horizontal"
             AlignItems="AlignItems.Center"
             JustifyContent="JustifyContent.Center"
             Wrap="FlexWrap.NoWrap" Gap="10px">
    @if (loading)
    {
        <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    }
    else
    {
        @foreach (var c in Enumerable.Range(0, _cols))
        {
            <RadzenFieldset Text="@($"Player{c + 1}")" Style="@($"border-color:{borders[c]}")">
                <RadzenStack Orientation="Orientation.Vertical"
                             AlignItems="AlignItems.Center"
                             Wrap="FlexWrap.Wrap" Gap="4px">
                    <RadzenFormField Text="Name" Variant="Variant.Outlined">
                        <RadzenTextBox Placeholder="@($"Player{c + 1}")" />
                    </RadzenFormField>
                    @foreach (var r in Enumerable.Range(0, _rows))
                    {
                        <RadzenFormField Text="@($"{r + 1}")" Variant="Variant.Outlined">
                            <RadzenNumeric @bind-Value="@scores[c][r]"
                                           TextAlign="TextAlign.Center"
                                           TValue="int"
                                           Change="@(_ => UpdateScores(c))" />
                        </RadzenFormField>
                    }
                    <RadzenFormField Text="Total" Variant="Variant.Outlined">
                        <RadzenNumeric Value="@sums[c]"
                                       ShowUpDown="false"
                                       TextAlign="TextAlign.Center"
                                       Disabled="true" />
                    </RadzenFormField>
                </RadzenStack>
            </RadzenFieldset>
        }
    }
</RadzenStack>

@code {
    int _cols = 2;
    int _rows = 10;
    bool loading = true;
    List<string> borders = [];
    List<int> sums = [];
    Dictionary<int, List<int>> scores = [];

    protected override void OnInitialized()
    {
        sums = Enumerable.Range(0, _cols).Select(_ => 0).ToList();
        scores = Enumerable.Range(0, _cols).ToDictionary(c => c, c => Enumerable.Range(0, _rows).Select(_ => 0).ToList());
        borders = Enumerable.Range(0, _cols).Select(_ => "var(--rz-secondary)").ToList();
        loading = false;
    }

    void ChangeSetup()
    {
        loading = true;
        sums = Enumerable.Range(0, _cols).Select(_ => 0).ToList();
        scores = Enumerable.Range(0, _cols).ToDictionary(c => c, c => Enumerable.Range(0, _rows).Select(_ => 0).ToList());
        borders = Enumerable.Range(0, _cols).Select(_ => "var(--rz-secondary)").ToList();
        loading = false;
        StateHasChanged();
    }

    void UpdateScores(int c)
    {
        sums[c] = scores[c].Sum();
        var max = scores.Select(x => x.Value.Sum()).Max();
        var indexes = scores.Where(x => x.Value.Sum() == max);
        if (indexes.Count() == 1)
        {
            borders = Enumerable.Range(0, _cols).Select(_ => "var(--rz-secondary)").ToList();
            borders[indexes.First().Key] = "var(--rz-primary)";
        }
        else
        {
            borders = Enumerable.Range(0, _cols).Select(_ => "var(--rz-secondary)").ToList();
        }
    }

    void ClearScores()
    {
        sums = Enumerable.Range(0, _cols).Select(_ => 0).ToList();
        scores = Enumerable.Range(0, _cols).ToDictionary(c => c, c => Enumerable.Range(0, _rows).Select(_ => 0).ToList());
        borders = Enumerable.Range(0, _cols).Select(_ => "var(--rz-secondary)").ToList();
    }
}
